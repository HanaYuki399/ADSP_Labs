// -------------------------------------------------------------
//
// Module: Lab_2_q1
// Generated by MATLAB(R) 8.1 and the Filter Design HDL Coder 2.9.3.
// Generated on: 2022-03-31 21:52:48
// Lab 2 Filter Question 1
//
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// Name: Lab_2_q1
// UserComment:  User data, length 23
// TargetLanguage: Verilog
// TestBenchName: Lab_2_q1_tb
// TestBenchStimulus: step ramp chirp 

// Filter Specifications:
//
// Sampling Frequency     : N/A (normalized frequency)
// Response               : Bandstop
// Specification          : Fp1,Fst1,Fst2,Fp2,Ap1,Ast,Ap2
// First Passband Edge    : 0.3
// First Stopband Edge    : 0.4
// Second Stopband Edge   : 0.40833
// Second Passband Edge   : 0.51667
// First Passband Ripple  : 1 dB
// Stopband Atten.        : 60 dB
// Second Passband Ripple : 60 dB
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Multipliers           : 12
// Folding Factor        : 1
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time IIR Filter (real)
// -------------------------------
// Filter Structure    : Direct-Form II, Second-Order Sections
// Number of Sections  : 3
// Stable              : Yes
// Linear Phase        : No
// Arithmetic          : fixed
// Numerator           : s16,14 -> [-2 2)
// Denominator         : s16,14 -> [-2 2)
// Scale Values        : s16,14 -> [-2 2)
// Input               : s16,15 -> [-1 1)
// Section Input       : s16,9 -> [-64 64)
// Section Output      : s16,11 -> [-16 16)
// Output              : s16,11 -> [-16 16)
// State               : s16,15 -> [-1 1)
// Numerator Prod      : s32,29 -> [-4 4)
// Denominator Prod    : s32,29 -> [-4 4)
// Numerator Accum     : s34,29 -> [-16 16)
// Denominator Accum   : s34,29 -> [-16 16)
// Round Mode          : convergent
// Overflow Mode       : wrap
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Lab_2_q1
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [15:0] filter_in; //sfix16_En15
  output  signed [15:0] filter_out; //sfix16_En11

////////////////////////////////////////////////////////////////
//Module Architecture: Lab_2_q1
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] scaleconst1 = 16'b0010011111001111; //sfix16_En14
  parameter signed [15:0] coeff_b1_section1 = 16'b0100000000000000; //sfix16_En14
  parameter signed [15:0] coeff_b2_section1 = 16'b1101001000011110; //sfix16_En14
  parameter signed [15:0] coeff_b3_section1 = 16'b0100000000000000; //sfix16_En14
  parameter signed [15:0] coeff_a2_section1 = 16'b0000010100100111; //sfix16_En14
  parameter signed [15:0] coeff_a3_section1 = 16'b0011010111111010; //sfix16_En14
  parameter signed [15:0] scaleconst2 = 16'b0010011111001111; //sfix16_En14
  parameter signed [15:0] coeff_b1_section2 = 16'b0100000000000000; //sfix16_En14
  parameter signed [15:0] coeff_b2_section2 = 16'b1110000100001010; //sfix16_En14
  parameter signed [15:0] coeff_b3_section2 = 16'b0100000000000000; //sfix16_En14
  parameter signed [15:0] coeff_a2_section2 = 16'b1011101001010000; //sfix16_En14
  parameter signed [15:0] coeff_a3_section2 = 16'b0011011110111001; //sfix16_En14
  parameter signed [15:0] scaleconst3 = 16'b0100101011100101; //sfix16_En14
  parameter signed [15:0] coeff_b1_section3 = 16'b0100000000000000; //sfix16_En14
  parameter signed [15:0] coeff_b2_section3 = 16'b1101100101101111; //sfix16_En14
  parameter signed [15:0] coeff_b3_section3 = 16'b0100000000000000; //sfix16_En14
  parameter signed [15:0] coeff_a2_section3 = 16'b1110100101101010; //sfix16_En14
  parameter signed [15:0] coeff_a3_section3 = 16'b0000101011110101; //sfix16_En14
  // Signals
  reg  signed [15:0] input_register; // sfix16_En15
  wire signed [35:0] scale1; // sfix36_En29
  wire signed [31:0] mul_temp; // sfix32_En29
  wire signed [15:0] scaletypeconvert1; // sfix16_En9
  // Section 1 Signals 
  wire signed [33:0] a1sum1; // sfix34_En29
  wire signed [33:0] a2sum1; // sfix34_En29
  wire signed [33:0] b1sum1; // sfix34_En29
  wire signed [33:0] b2sum1; // sfix34_En29
  wire signed [15:0] typeconvert1; // sfix16_En15
  reg  signed [15:0] delay_section1 [0:1] ; // sfix16_En15
  wire signed [15:0] inputconv1; // sfix16_En9
  wire signed [31:0] a2mul1; // sfix32_En29
  wire signed [31:0] a3mul1; // sfix32_En29
  wire signed [31:0] b1mul1; // sfix32_En29
  wire signed [31:0] b2mul1; // sfix32_En29
  wire signed [31:0] b3mul1; // sfix32_En29
  wire signed [33:0] sub_cast; // sfix34_En29
  wire signed [33:0] sub_cast_1; // sfix34_En29
  wire signed [34:0] sub_temp; // sfix35_En29
  wire signed [33:0] sub_cast_2; // sfix34_En29
  wire signed [33:0] sub_cast_3; // sfix34_En29
  wire signed [34:0] sub_temp_1; // sfix35_En29
  wire signed [33:0] b1multypeconvert1; // sfix34_En29
  wire signed [33:0] add_cast; // sfix34_En29
  wire signed [33:0] add_cast_1; // sfix34_En29
  wire signed [34:0] add_temp; // sfix35_En29
  wire signed [33:0] add_cast_2; // sfix34_En29
  wire signed [33:0] add_cast_3; // sfix34_En29
  wire signed [34:0] add_temp_1; // sfix35_En29
  wire signed [15:0] section_result1; // sfix16_En11
  wire signed [35:0] scale2; // sfix36_En29
  wire signed [31:0] mul_temp_1; // sfix32_En25
  wire signed [15:0] scaletypeconvert2; // sfix16_En9
  // Section 2 Signals 
  wire signed [33:0] a1sum2; // sfix34_En29
  wire signed [33:0] a2sum2; // sfix34_En29
  wire signed [33:0] b1sum2; // sfix34_En29
  wire signed [33:0] b2sum2; // sfix34_En29
  wire signed [15:0] typeconvert2; // sfix16_En15
  reg  signed [15:0] delay_section2 [0:1] ; // sfix16_En15
  wire signed [15:0] inputconv2; // sfix16_En9
  wire signed [31:0] a2mul2; // sfix32_En29
  wire signed [31:0] a3mul2; // sfix32_En29
  wire signed [31:0] b1mul2; // sfix32_En29
  wire signed [31:0] b2mul2; // sfix32_En29
  wire signed [31:0] b3mul2; // sfix32_En29
  wire signed [33:0] sub_cast_4; // sfix34_En29
  wire signed [33:0] sub_cast_5; // sfix34_En29
  wire signed [34:0] sub_temp_2; // sfix35_En29
  wire signed [33:0] sub_cast_6; // sfix34_En29
  wire signed [33:0] sub_cast_7; // sfix34_En29
  wire signed [34:0] sub_temp_3; // sfix35_En29
  wire signed [33:0] b1multypeconvert2; // sfix34_En29
  wire signed [33:0] add_cast_4; // sfix34_En29
  wire signed [33:0] add_cast_5; // sfix34_En29
  wire signed [34:0] add_temp_2; // sfix35_En29
  wire signed [33:0] add_cast_6; // sfix34_En29
  wire signed [33:0] add_cast_7; // sfix34_En29
  wire signed [34:0] add_temp_3; // sfix35_En29
  wire signed [15:0] section_result2; // sfix16_En11
  wire signed [35:0] scale3; // sfix36_En29
  wire signed [31:0] mul_temp_2; // sfix32_En25
  wire signed [15:0] scaletypeconvert3; // sfix16_En9
  // Section 3 Signals 
  wire signed [33:0] a1sum3; // sfix34_En29
  wire signed [33:0] a2sum3; // sfix34_En29
  wire signed [33:0] b1sum3; // sfix34_En29
  wire signed [33:0] b2sum3; // sfix34_En29
  wire signed [15:0] typeconvert3; // sfix16_En15
  reg  signed [15:0] delay_section3 [0:1] ; // sfix16_En15
  wire signed [15:0] inputconv3; // sfix16_En9
  wire signed [31:0] a2mul3; // sfix32_En29
  wire signed [31:0] a3mul3; // sfix32_En29
  wire signed [31:0] b1mul3; // sfix32_En29
  wire signed [31:0] b2mul3; // sfix32_En29
  wire signed [31:0] b3mul3; // sfix32_En29
  wire signed [33:0] sub_cast_8; // sfix34_En29
  wire signed [33:0] sub_cast_9; // sfix34_En29
  wire signed [34:0] sub_temp_4; // sfix35_En29
  wire signed [33:0] sub_cast_10; // sfix34_En29
  wire signed [33:0] sub_cast_11; // sfix34_En29
  wire signed [34:0] sub_temp_5; // sfix35_En29
  wire signed [33:0] b1multypeconvert3; // sfix34_En29
  wire signed [33:0] add_cast_8; // sfix34_En29
  wire signed [33:0] add_cast_9; // sfix34_En29
  wire signed [34:0] add_temp_4; // sfix35_En29
  wire signed [33:0] add_cast_10; // sfix34_En29
  wire signed [33:0] add_cast_11; // sfix34_En29
  wire signed [34:0] add_temp_5; // sfix35_En29
  wire signed [15:0] output_typeconvert; // sfix16_En11
  reg  signed [15:0] output_register; // sfix16_En11

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: input_reg_process
      if (reset == 1'b1) begin
        input_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          input_register <= filter_in;
        end
      end
    end // input_reg_process

  assign mul_temp = input_register * scaleconst1;
  assign scale1 = $signed({{4{mul_temp[31]}}, mul_temp});

  assign scaletypeconvert1 = (scale1[35:0] + {scale1[20], {19{~scale1[20]}}})>>>20;

  //   ------------------ Section 1 ------------------

  assign typeconvert1 = (a1sum1[29:0] + {a1sum1[14], {13{~a1sum1[14]}}})>>>14;

  always @ (posedge clk or posedge reset)
    begin: delay_process_section1
      if (reset == 1'b1) begin
        delay_section1[0] <= 16'b0000000000000000;
        delay_section1[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_section1[1] <= delay_section1[0];
          delay_section1[0] <= typeconvert1;
        end
      end
    end // delay_process_section1

  assign inputconv1 = scaletypeconvert1;

  assign a2mul1 = delay_section1[0] * coeff_a2_section1;

  assign a3mul1 = delay_section1[1] * coeff_a3_section1;

  assign b1mul1 = $signed({typeconvert1[15:0], 14'b00000000000000});

  assign b2mul1 = delay_section1[0] * coeff_b2_section1;

  assign b3mul1 = $signed({delay_section1[1][15:0], 14'b00000000000000});

  assign sub_cast = $signed({inputconv1[13:0], 20'b00000000000000000000});
  assign sub_cast_1 = $signed({{2{a2mul1[31]}}, a2mul1});
  assign sub_temp = sub_cast - sub_cast_1;
  assign a2sum1 = sub_temp[33:0];

  assign sub_cast_2 = a2sum1;
  assign sub_cast_3 = $signed({{2{a3mul1[31]}}, a3mul1});
  assign sub_temp_1 = sub_cast_2 - sub_cast_3;
  assign a1sum1 = sub_temp_1[33:0];

  assign b1multypeconvert1 = $signed({{2{b1mul1[31]}}, b1mul1});

  assign add_cast = b1multypeconvert1;
  assign add_cast_1 = $signed({{2{b2mul1[31]}}, b2mul1});
  assign add_temp = add_cast + add_cast_1;
  assign b2sum1 = add_temp[33:0];

  assign add_cast_2 = b2sum1;
  assign add_cast_3 = $signed({{2{b3mul1[31]}}, b3mul1});
  assign add_temp_1 = add_cast_2 + add_cast_3;
  assign b1sum1 = add_temp_1[33:0];

  assign section_result1 = (b1sum1[33:0] + {b1sum1[18], {17{~b1sum1[18]}}})>>>18;

  assign mul_temp_1 = section_result1 * scaleconst2;
  assign scale2 = $signed({mul_temp_1[31:0], 4'b0000});

  assign scaletypeconvert2 = (scale2[35:0] + {scale2[20], {19{~scale2[20]}}})>>>20;

  //   ------------------ Section 2 ------------------

  assign typeconvert2 = (a1sum2[29:0] + {a1sum2[14], {13{~a1sum2[14]}}})>>>14;

  always @ (posedge clk or posedge reset)
    begin: delay_process_section2
      if (reset == 1'b1) begin
        delay_section2[0] <= 16'b0000000000000000;
        delay_section2[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_section2[1] <= delay_section2[0];
          delay_section2[0] <= typeconvert2;
        end
      end
    end // delay_process_section2

  assign inputconv2 = scaletypeconvert2;

  assign a2mul2 = delay_section2[0] * coeff_a2_section2;

  assign a3mul2 = delay_section2[1] * coeff_a3_section2;

  assign b1mul2 = $signed({typeconvert2[15:0], 14'b00000000000000});

  assign b2mul2 = delay_section2[0] * coeff_b2_section2;

  assign b3mul2 = $signed({delay_section2[1][15:0], 14'b00000000000000});

  assign sub_cast_4 = $signed({inputconv2[13:0], 20'b00000000000000000000});
  assign sub_cast_5 = $signed({{2{a2mul2[31]}}, a2mul2});
  assign sub_temp_2 = sub_cast_4 - sub_cast_5;
  assign a2sum2 = sub_temp_2[33:0];

  assign sub_cast_6 = a2sum2;
  assign sub_cast_7 = $signed({{2{a3mul2[31]}}, a3mul2});
  assign sub_temp_3 = sub_cast_6 - sub_cast_7;
  assign a1sum2 = sub_temp_3[33:0];

  assign b1multypeconvert2 = $signed({{2{b1mul2[31]}}, b1mul2});

  assign add_cast_4 = b1multypeconvert2;
  assign add_cast_5 = $signed({{2{b2mul2[31]}}, b2mul2});
  assign add_temp_2 = add_cast_4 + add_cast_5;
  assign b2sum2 = add_temp_2[33:0];

  assign add_cast_6 = b2sum2;
  assign add_cast_7 = $signed({{2{b3mul2[31]}}, b3mul2});
  assign add_temp_3 = add_cast_6 + add_cast_7;
  assign b1sum2 = add_temp_3[33:0];

  assign section_result2 = (b1sum2[33:0] + {b1sum2[18], {17{~b1sum2[18]}}})>>>18;

  assign mul_temp_2 = section_result2 * scaleconst3;
  assign scale3 = $signed({mul_temp_2[31:0], 4'b0000});

  assign scaletypeconvert3 = (scale3[35:0] + {scale3[20], {19{~scale3[20]}}})>>>20;

  //   ------------------ Section 3 ------------------

  assign typeconvert3 = (a1sum3[29:0] + {a1sum3[14], {13{~a1sum3[14]}}})>>>14;

  always @ (posedge clk or posedge reset)
    begin: delay_process_section3
      if (reset == 1'b1) begin
        delay_section3[0] <= 16'b0000000000000000;
        delay_section3[1] <= 16'b0000000000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_section3[1] <= delay_section3[0];
          delay_section3[0] <= typeconvert3;
        end
      end
    end // delay_process_section3

  assign inputconv3 = scaletypeconvert3;

  assign a2mul3 = delay_section3[0] * coeff_a2_section3;

  assign a3mul3 = delay_section3[1] * coeff_a3_section3;

  assign b1mul3 = $signed({typeconvert3[15:0], 14'b00000000000000});

  assign b2mul3 = delay_section3[0] * coeff_b2_section3;

  assign b3mul3 = $signed({delay_section3[1][15:0], 14'b00000000000000});

  assign sub_cast_8 = $signed({inputconv3[13:0], 20'b00000000000000000000});
  assign sub_cast_9 = $signed({{2{a2mul3[31]}}, a2mul3});
  assign sub_temp_4 = sub_cast_8 - sub_cast_9;
  assign a2sum3 = sub_temp_4[33:0];

  assign sub_cast_10 = a2sum3;
  assign sub_cast_11 = $signed({{2{a3mul3[31]}}, a3mul3});
  assign sub_temp_5 = sub_cast_10 - sub_cast_11;
  assign a1sum3 = sub_temp_5[33:0];

  assign b1multypeconvert3 = $signed({{2{b1mul3[31]}}, b1mul3});

  assign add_cast_8 = b1multypeconvert3;
  assign add_cast_9 = $signed({{2{b2mul3[31]}}, b2mul3});
  assign add_temp_4 = add_cast_8 + add_cast_9;
  assign b2sum3 = add_temp_4[33:0];

  assign add_cast_10 = b2sum3;
  assign add_cast_11 = $signed({{2{b3mul3[31]}}, b3mul3});
  assign add_temp_5 = add_cast_10 + add_cast_11;
  assign b1sum3 = add_temp_5[33:0];

  assign output_typeconvert = (b1sum3[33:0] + {b1sum3[18], {17{~b1sum3[18]}}})>>>18;

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // Lab_2_q1
